// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fta_request.proto

#ifndef PROTOBUF_fta_5frequest_2eproto__INCLUDED
#define PROTOBUF_fta_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fta_5frequest_2eproto();
void protobuf_AssignDesc_fta_5frequest_2eproto();
void protobuf_ShutdownFile_fta_5frequest_2eproto();

class fta_request;

// ===================================================================

class fta_request : public ::google::protobuf::Message {
 public:
  fta_request();
  virtual ~fta_request();

  fta_request(const fta_request& from);

  inline fta_request& operator=(const fta_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fta_request& default_instance();

  void Swap(fta_request* other);

  // implements Message ----------------------------------------------

  fta_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fta_request& from);
  void MergeFrom(const fta_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool post = 1;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  inline bool post() const;
  inline void set_post(bool value);

  // optional bool get = 2;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline bool get() const;
  inline void set_get(bool value);

  // optional string post_filename = 3;
  inline bool has_post_filename() const;
  inline void clear_post_filename();
  static const int kPostFilenameFieldNumber = 3;
  inline const ::std::string& post_filename() const;
  inline void set_post_filename(const ::std::string& value);
  inline void set_post_filename(const char* value);
  inline void set_post_filename(const char* value, size_t size);
  inline ::std::string* mutable_post_filename();
  inline ::std::string* release_post_filename();
  inline void set_allocated_post_filename(::std::string* post_filename);

  // optional uint32 post_size = 4;
  inline bool has_post_size() const;
  inline void clear_post_size();
  static const int kPostSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 post_size() const;
  inline void set_post_size(::google::protobuf::uint32 value);

  // optional string get_filename = 5;
  inline bool has_get_filename() const;
  inline void clear_get_filename();
  static const int kGetFilenameFieldNumber = 5;
  inline const ::std::string& get_filename() const;
  inline void set_get_filename(const ::std::string& value);
  inline void set_get_filename(const char* value);
  inline void set_get_filename(const char* value, size_t size);
  inline ::std::string* mutable_get_filename();
  inline ::std::string* release_get_filename();
  inline void set_allocated_get_filename(::std::string* get_filename);

  // @@protoc_insertion_point(class_scope:fta_request)
 private:
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_post_filename();
  inline void clear_has_post_filename();
  inline void set_has_post_size();
  inline void clear_has_post_size();
  inline void set_has_get_filename();
  inline void clear_has_get_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool post_;
  bool get_;
  ::google::protobuf::uint32 post_size_;
  ::std::string* post_filename_;
  ::std::string* get_filename_;
  friend void  protobuf_AddDesc_fta_5frequest_2eproto();
  friend void protobuf_AssignDesc_fta_5frequest_2eproto();
  friend void protobuf_ShutdownFile_fta_5frequest_2eproto();

  void InitAsDefaultInstance();
  static fta_request* default_instance_;
};
// ===================================================================


// ===================================================================

// fta_request

// optional bool post = 1;
inline bool fta_request::has_post() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fta_request::set_has_post() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fta_request::clear_has_post() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fta_request::clear_post() {
  post_ = false;
  clear_has_post();
}
inline bool fta_request::post() const {
  // @@protoc_insertion_point(field_get:fta_request.post)
  return post_;
}
inline void fta_request::set_post(bool value) {
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:fta_request.post)
}

// optional bool get = 2;
inline bool fta_request::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fta_request::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fta_request::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fta_request::clear_get() {
  get_ = false;
  clear_has_get();
}
inline bool fta_request::get() const {
  // @@protoc_insertion_point(field_get:fta_request.get)
  return get_;
}
inline void fta_request::set_get(bool value) {
  set_has_get();
  get_ = value;
  // @@protoc_insertion_point(field_set:fta_request.get)
}

// optional string post_filename = 3;
inline bool fta_request::has_post_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fta_request::set_has_post_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fta_request::clear_has_post_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fta_request::clear_post_filename() {
  if (post_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_filename_->clear();
  }
  clear_has_post_filename();
}
inline const ::std::string& fta_request::post_filename() const {
  // @@protoc_insertion_point(field_get:fta_request.post_filename)
  return *post_filename_;
}
inline void fta_request::set_post_filename(const ::std::string& value) {
  set_has_post_filename();
  if (post_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_filename_ = new ::std::string;
  }
  post_filename_->assign(value);
  // @@protoc_insertion_point(field_set:fta_request.post_filename)
}
inline void fta_request::set_post_filename(const char* value) {
  set_has_post_filename();
  if (post_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_filename_ = new ::std::string;
  }
  post_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:fta_request.post_filename)
}
inline void fta_request::set_post_filename(const char* value, size_t size) {
  set_has_post_filename();
  if (post_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_filename_ = new ::std::string;
  }
  post_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fta_request.post_filename)
}
inline ::std::string* fta_request::mutable_post_filename() {
  set_has_post_filename();
  if (post_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    post_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fta_request.post_filename)
  return post_filename_;
}
inline ::std::string* fta_request::release_post_filename() {
  clear_has_post_filename();
  if (post_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = post_filename_;
    post_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fta_request::set_allocated_post_filename(::std::string* post_filename) {
  if (post_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete post_filename_;
  }
  if (post_filename) {
    set_has_post_filename();
    post_filename_ = post_filename;
  } else {
    clear_has_post_filename();
    post_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fta_request.post_filename)
}

// optional uint32 post_size = 4;
inline bool fta_request::has_post_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fta_request::set_has_post_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fta_request::clear_has_post_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fta_request::clear_post_size() {
  post_size_ = 0u;
  clear_has_post_size();
}
inline ::google::protobuf::uint32 fta_request::post_size() const {
  // @@protoc_insertion_point(field_get:fta_request.post_size)
  return post_size_;
}
inline void fta_request::set_post_size(::google::protobuf::uint32 value) {
  set_has_post_size();
  post_size_ = value;
  // @@protoc_insertion_point(field_set:fta_request.post_size)
}

// optional string get_filename = 5;
inline bool fta_request::has_get_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fta_request::set_has_get_filename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fta_request::clear_has_get_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fta_request::clear_get_filename() {
  if (get_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_filename_->clear();
  }
  clear_has_get_filename();
}
inline const ::std::string& fta_request::get_filename() const {
  // @@protoc_insertion_point(field_get:fta_request.get_filename)
  return *get_filename_;
}
inline void fta_request::set_get_filename(const ::std::string& value) {
  set_has_get_filename();
  if (get_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_filename_ = new ::std::string;
  }
  get_filename_->assign(value);
  // @@protoc_insertion_point(field_set:fta_request.get_filename)
}
inline void fta_request::set_get_filename(const char* value) {
  set_has_get_filename();
  if (get_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_filename_ = new ::std::string;
  }
  get_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:fta_request.get_filename)
}
inline void fta_request::set_get_filename(const char* value, size_t size) {
  set_has_get_filename();
  if (get_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_filename_ = new ::std::string;
  }
  get_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fta_request.get_filename)
}
inline ::std::string* fta_request::mutable_get_filename() {
  set_has_get_filename();
  if (get_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fta_request.get_filename)
  return get_filename_;
}
inline ::std::string* fta_request::release_get_filename() {
  clear_has_get_filename();
  if (get_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = get_filename_;
    get_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fta_request::set_allocated_get_filename(::std::string* get_filename) {
  if (get_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete get_filename_;
  }
  if (get_filename) {
    set_has_get_filename();
    get_filename_ = get_filename;
  } else {
    clear_has_get_filename();
    get_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fta_request.get_filename)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fta_5frequest_2eproto__INCLUDED
