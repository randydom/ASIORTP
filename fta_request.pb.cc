// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fta_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fta_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* fta_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fta_request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fta_5frequest_2eproto() {
  protobuf_AddDesc_fta_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fta_request.proto");
  GOOGLE_CHECK(file != NULL);
  fta_request_descriptor_ = file->message_type(0);
  static const int fta_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, post_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, post_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, get_filename_),
  };
  fta_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fta_request_descriptor_,
      fta_request::default_instance_,
      fta_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fta_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fta_request));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fta_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fta_request_descriptor_, &fta_request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fta_5frequest_2eproto() {
  delete fta_request::default_instance_;
  delete fta_request_reflection_;
}

void protobuf_AddDesc_fta_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021fta_request.proto\"h\n\013fta_request\022\014\n\004po"
    "st\030\001 \001(\010\022\013\n\003get\030\002 \001(\010\022\025\n\rpost_filename\030\003"
    " \001(\t\022\021\n\tpost_size\030\004 \001(\r\022\024\n\014get_filename\030"
    "\005 \001(\t", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fta_request.proto", &protobuf_RegisterTypes);
  fta_request::default_instance_ = new fta_request();
  fta_request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fta_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fta_5frequest_2eproto {
  StaticDescriptorInitializer_fta_5frequest_2eproto() {
    protobuf_AddDesc_fta_5frequest_2eproto();
  }
} static_descriptor_initializer_fta_5frequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int fta_request::kPostFieldNumber;
const int fta_request::kGetFieldNumber;
const int fta_request::kPostFilenameFieldNumber;
const int fta_request::kPostSizeFieldNumber;
const int fta_request::kGetFilenameFieldNumber;
#endif  // !_MSC_VER

fta_request::fta_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fta_request)
}

void fta_request::InitAsDefaultInstance() {
}

fta_request::fta_request(const fta_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fta_request)
}

void fta_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  post_ = false;
  get_ = false;
  post_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_size_ = 0u;
  get_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fta_request::~fta_request() {
  // @@protoc_insertion_point(destructor:fta_request)
  SharedDtor();
}

void fta_request::SharedDtor() {
  if (post_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete post_filename_;
  }
  if (get_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete get_filename_;
  }
  if (this != default_instance_) {
  }
}

void fta_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fta_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fta_request_descriptor_;
}

const fta_request& fta_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fta_5frequest_2eproto();
  return *default_instance_;
}

fta_request* fta_request::default_instance_ = NULL;

fta_request* fta_request::New() const {
  return new fta_request;
}

void fta_request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fta_request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(post_, post_size_);
    if (has_post_filename()) {
      if (post_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        post_filename_->clear();
      }
    }
    if (has_get_filename()) {
      if (get_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        get_filename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fta_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fta_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool post = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_)));
          set_has_post();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get;
        break;
      }

      // optional bool get = 2;
      case 2: {
        if (tag == 16) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_filename;
        break;
      }

      // optional string post_filename = 3;
      case 3: {
        if (tag == 26) {
         parse_post_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->post_filename().data(), this->post_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "post_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_post_size;
        break;
      }

      // optional uint32 post_size = 4;
      case 4: {
        if (tag == 32) {
         parse_post_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_size_)));
          set_has_post_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_filename;
        break;
      }

      // optional string get_filename = 5;
      case 5: {
        if (tag == 42) {
         parse_get_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_get_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->get_filename().data(), this->get_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "get_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fta_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fta_request)
  return false;
#undef DO_
}

void fta_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fta_request)
  // optional bool post = 1;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->post(), output);
  }

  // optional bool get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get(), output);
  }

  // optional string post_filename = 3;
  if (has_post_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post_filename().data(), this->post_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "post_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->post_filename(), output);
  }

  // optional uint32 post_size = 4;
  if (has_post_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->post_size(), output);
  }

  // optional string get_filename = 5;
  if (has_get_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->get_filename().data(), this->get_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->get_filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fta_request)
}

::google::protobuf::uint8* fta_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fta_request)
  // optional bool post = 1;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->post(), target);
  }

  // optional bool get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get(), target);
  }

  // optional string post_filename = 3;
  if (has_post_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post_filename().data(), this->post_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "post_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->post_filename(), target);
  }

  // optional uint32 post_size = 4;
  if (has_post_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->post_size(), target);
  }

  // optional string get_filename = 5;
  if (has_get_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->get_filename().data(), this->get_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->get_filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fta_request)
  return target;
}

int fta_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool post = 1;
    if (has_post()) {
      total_size += 1 + 1;
    }

    // optional bool get = 2;
    if (has_get()) {
      total_size += 1 + 1;
    }

    // optional string post_filename = 3;
    if (has_post_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post_filename());
    }

    // optional uint32 post_size = 4;
    if (has_post_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->post_size());
    }

    // optional string get_filename = 5;
    if (has_get_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->get_filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fta_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fta_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fta_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fta_request::MergeFrom(const fta_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
    if (from.has_post_filename()) {
      set_post_filename(from.post_filename());
    }
    if (from.has_post_size()) {
      set_post_size(from.post_size());
    }
    if (from.has_get_filename()) {
      set_get_filename(from.get_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fta_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fta_request::CopyFrom(const fta_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fta_request::IsInitialized() const {

  return true;
}

void fta_request::Swap(fta_request* other) {
  if (other != this) {
    std::swap(post_, other->post_);
    std::swap(get_, other->get_);
    std::swap(post_filename_, other->post_filename_);
    std::swap(post_size_, other->post_size_);
    std::swap(get_filename_, other->get_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fta_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fta_request_descriptor_;
  metadata.reflection = fta_request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
