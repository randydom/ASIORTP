// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segment.proto

#ifndef PROTOBUF_segment_2eproto__INCLUDED
#define PROTOBUF_segment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rtp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_segment_2eproto();
void protobuf_AssignDesc_segment_2eproto();
void protobuf_ShutdownFile_segment_2eproto();

class Segment;

// ===================================================================

class Segment : public ::google::protobuf::Message {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment& default_instance();

  void Swap(Segment* other);

  // implements Message ----------------------------------------------

  Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source_port = 1;
  inline bool has_source_port() const;
  inline void clear_source_port();
  static const int kSourcePortFieldNumber = 1;
  inline const ::std::string& source_port() const;
  inline void set_source_port(const ::std::string& value);
  inline void set_source_port(const char* value);
  inline void set_source_port(const char* value, size_t size);
  inline ::std::string* mutable_source_port();
  inline ::std::string* release_source_port();
  inline void set_allocated_source_port(::std::string* source_port);

  // optional string dest_port = 2;
  inline bool has_dest_port() const;
  inline void clear_dest_port();
  static const int kDestPortFieldNumber = 2;
  inline const ::std::string& dest_port() const;
  inline void set_dest_port(const ::std::string& value);
  inline void set_dest_port(const char* value);
  inline void set_dest_port(const char* value, size_t size);
  inline ::std::string* mutable_dest_port();
  inline ::std::string* release_dest_port();
  inline void set_allocated_dest_port(::std::string* dest_port);

  // optional int32 sequence_no = 3;
  inline bool has_sequence_no() const;
  inline void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 3;
  inline ::google::protobuf::int32 sequence_no() const;
  inline void set_sequence_no(::google::protobuf::int32 value);

  // optional bool ack = 4;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 4;
  inline bool ack() const;
  inline void set_ack(bool value);

  // optional bool syn = 5;
  inline bool has_syn() const;
  inline void clear_syn();
  static const int kSynFieldNumber = 5;
  inline bool syn() const;
  inline void set_syn(bool value);

  // optional bool fin = 6;
  inline bool has_fin() const;
  inline void clear_fin();
  static const int kFinFieldNumber = 6;
  inline bool fin() const;
  inline void set_fin(bool value);

  // optional int32 receive_window = 7;
  inline bool has_receive_window() const;
  inline void clear_receive_window();
  static const int kReceiveWindowFieldNumber = 7;
  inline ::google::protobuf::int32 receive_window() const;
  inline void set_receive_window(::google::protobuf::int32 value);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 data_checksum = 9;
  inline bool has_data_checksum() const;
  inline void clear_data_checksum();
  static const int kDataChecksumFieldNumber = 9;
  inline ::google::protobuf::int32 data_checksum() const;
  inline void set_data_checksum(::google::protobuf::int32 value);

  // optional int32 header_checksum = 10;
  inline bool has_header_checksum() const;
  inline void clear_header_checksum();
  static const int kHeaderChecksumFieldNumber = 10;
  inline ::google::protobuf::int32 header_checksum() const;
  inline void set_header_checksum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rtp.Segment)
 private:
  inline void set_has_source_port();
  inline void clear_has_source_port();
  inline void set_has_dest_port();
  inline void clear_has_dest_port();
  inline void set_has_sequence_no();
  inline void clear_has_sequence_no();
  inline void set_has_ack();
  inline void clear_has_ack();
  inline void set_has_syn();
  inline void clear_has_syn();
  inline void set_has_fin();
  inline void clear_has_fin();
  inline void set_has_receive_window();
  inline void clear_has_receive_window();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data_checksum();
  inline void clear_has_data_checksum();
  inline void set_has_header_checksum();
  inline void clear_has_header_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_port_;
  ::std::string* dest_port_;
  ::google::protobuf::int32 sequence_no_;
  bool ack_;
  bool syn_;
  bool fin_;
  ::std::string* data_;
  ::google::protobuf::int32 receive_window_;
  ::google::protobuf::int32 data_checksum_;
  ::google::protobuf::int32 header_checksum_;
  friend void  protobuf_AddDesc_segment_2eproto();
  friend void protobuf_AssignDesc_segment_2eproto();
  friend void protobuf_ShutdownFile_segment_2eproto();

  void InitAsDefaultInstance();
  static Segment* default_instance_;
};
// ===================================================================


// ===================================================================

// Segment

// optional string source_port = 1;
inline bool Segment::has_source_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment::set_has_source_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment::clear_has_source_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment::clear_source_port() {
  if (source_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_port_->clear();
  }
  clear_has_source_port();
}
inline const ::std::string& Segment::source_port() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.source_port)
  return *source_port_;
}
inline void Segment::set_source_port(const ::std::string& value) {
  set_has_source_port();
  if (source_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_port_ = new ::std::string;
  }
  source_port_->assign(value);
  // @@protoc_insertion_point(field_set:rtp.Segment.source_port)
}
inline void Segment::set_source_port(const char* value) {
  set_has_source_port();
  if (source_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_port_ = new ::std::string;
  }
  source_port_->assign(value);
  // @@protoc_insertion_point(field_set_char:rtp.Segment.source_port)
}
inline void Segment::set_source_port(const char* value, size_t size) {
  set_has_source_port();
  if (source_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_port_ = new ::std::string;
  }
  source_port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rtp.Segment.source_port)
}
inline ::std::string* Segment::mutable_source_port() {
  set_has_source_port();
  if (source_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rtp.Segment.source_port)
  return source_port_;
}
inline ::std::string* Segment::release_source_port() {
  clear_has_source_port();
  if (source_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_port_;
    source_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_source_port(::std::string* source_port) {
  if (source_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_port_;
  }
  if (source_port) {
    set_has_source_port();
    source_port_ = source_port;
  } else {
    clear_has_source_port();
    source_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rtp.Segment.source_port)
}

// optional string dest_port = 2;
inline bool Segment::has_dest_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment::set_has_dest_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment::clear_has_dest_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment::clear_dest_port() {
  if (dest_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_port_->clear();
  }
  clear_has_dest_port();
}
inline const ::std::string& Segment::dest_port() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.dest_port)
  return *dest_port_;
}
inline void Segment::set_dest_port(const ::std::string& value) {
  set_has_dest_port();
  if (dest_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_port_ = new ::std::string;
  }
  dest_port_->assign(value);
  // @@protoc_insertion_point(field_set:rtp.Segment.dest_port)
}
inline void Segment::set_dest_port(const char* value) {
  set_has_dest_port();
  if (dest_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_port_ = new ::std::string;
  }
  dest_port_->assign(value);
  // @@protoc_insertion_point(field_set_char:rtp.Segment.dest_port)
}
inline void Segment::set_dest_port(const char* value, size_t size) {
  set_has_dest_port();
  if (dest_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_port_ = new ::std::string;
  }
  dest_port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rtp.Segment.dest_port)
}
inline ::std::string* Segment::mutable_dest_port() {
  set_has_dest_port();
  if (dest_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rtp.Segment.dest_port)
  return dest_port_;
}
inline ::std::string* Segment::release_dest_port() {
  clear_has_dest_port();
  if (dest_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_port_;
    dest_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_dest_port(::std::string* dest_port) {
  if (dest_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_port_;
  }
  if (dest_port) {
    set_has_dest_port();
    dest_port_ = dest_port;
  } else {
    clear_has_dest_port();
    dest_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rtp.Segment.dest_port)
}

// optional int32 sequence_no = 3;
inline bool Segment::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Segment::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Segment::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Segment::clear_sequence_no() {
  sequence_no_ = 0;
  clear_has_sequence_no();
}
inline ::google::protobuf::int32 Segment::sequence_no() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.sequence_no)
  return sequence_no_;
}
inline void Segment::set_sequence_no(::google::protobuf::int32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.sequence_no)
}

// optional bool ack = 4;
inline bool Segment::has_ack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Segment::set_has_ack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Segment::clear_has_ack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Segment::clear_ack() {
  ack_ = false;
  clear_has_ack();
}
inline bool Segment::ack() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.ack)
  return ack_;
}
inline void Segment::set_ack(bool value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.ack)
}

// optional bool syn = 5;
inline bool Segment::has_syn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Segment::set_has_syn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Segment::clear_has_syn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Segment::clear_syn() {
  syn_ = false;
  clear_has_syn();
}
inline bool Segment::syn() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.syn)
  return syn_;
}
inline void Segment::set_syn(bool value) {
  set_has_syn();
  syn_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.syn)
}

// optional bool fin = 6;
inline bool Segment::has_fin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Segment::set_has_fin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Segment::clear_has_fin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Segment::clear_fin() {
  fin_ = false;
  clear_has_fin();
}
inline bool Segment::fin() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.fin)
  return fin_;
}
inline void Segment::set_fin(bool value) {
  set_has_fin();
  fin_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.fin)
}

// optional int32 receive_window = 7;
inline bool Segment::has_receive_window() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Segment::set_has_receive_window() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Segment::clear_has_receive_window() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Segment::clear_receive_window() {
  receive_window_ = 0;
  clear_has_receive_window();
}
inline ::google::protobuf::int32 Segment::receive_window() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.receive_window)
  return receive_window_;
}
inline void Segment::set_receive_window(::google::protobuf::int32 value) {
  set_has_receive_window();
  receive_window_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.receive_window)
}

// optional bytes data = 8;
inline bool Segment::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Segment::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Segment::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Segment::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Segment::data() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.data)
  return *data_;
}
inline void Segment::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:rtp.Segment.data)
}
inline void Segment::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:rtp.Segment.data)
}
inline void Segment::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rtp.Segment.data)
}
inline ::std::string* Segment::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rtp.Segment.data)
  return data_;
}
inline ::std::string* Segment::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Segment::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rtp.Segment.data)
}

// optional int32 data_checksum = 9;
inline bool Segment::has_data_checksum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Segment::set_has_data_checksum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Segment::clear_has_data_checksum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Segment::clear_data_checksum() {
  data_checksum_ = 0;
  clear_has_data_checksum();
}
inline ::google::protobuf::int32 Segment::data_checksum() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.data_checksum)
  return data_checksum_;
}
inline void Segment::set_data_checksum(::google::protobuf::int32 value) {
  set_has_data_checksum();
  data_checksum_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.data_checksum)
}

// optional int32 header_checksum = 10;
inline bool Segment::has_header_checksum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Segment::set_has_header_checksum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Segment::clear_has_header_checksum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Segment::clear_header_checksum() {
  header_checksum_ = 0;
  clear_has_header_checksum();
}
inline ::google::protobuf::int32 Segment::header_checksum() const {
  // @@protoc_insertion_point(field_get:rtp.Segment.header_checksum)
  return header_checksum_;
}
inline void Segment::set_header_checksum(::google::protobuf::int32 value) {
  set_has_header_checksum();
  header_checksum_ = value;
  // @@protoc_insertion_point(field_set:rtp.Segment.header_checksum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_segment_2eproto__INCLUDED
